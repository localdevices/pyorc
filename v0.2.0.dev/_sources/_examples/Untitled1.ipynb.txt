{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a301f794",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "ec88a0fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.quiver.Quiver at 0x7f6040e24130>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "xs = np.flipud(np.array([2., 1, -0.2, -0.05, 1, 3]))\n",
    "ys = np.flipud(np.linspace(10, 0, len(xs)))\n",
    "ax = plt.subplot(111)\n",
    "ax.plot(xs, ys)\n",
    "ax.set_xlim([-0.5, 12])\n",
    "ax.set_ylim([-2, 12])\n",
    "angle_da = np.zeros(len(xs))\n",
    "angle_da[1:-1] = np.arctan2(xs[2:] - xs[0:-2], ys[2:] - ys[0:-2])\n",
    "angle_da[0] = np.arctan2(xs[1] - xs[0], ys[1] - ys[0])\n",
    "angle_da[-1] = np.arctan2(xs[-1] - xs[-2], ys[-1] - ys[-2])\n",
    "\n",
    "\n",
    "flow_dir = angle_da - 0.5 * np.pi\n",
    "\n",
    "v_eff = 5.\n",
    "\n",
    "u = v_eff * np.sin(flow_dir)\n",
    "v = v_eff * np.cos(flow_dir)\n",
    "\n",
    "ax.quiver(xs, ys, u, v)\n",
    "# ax.set_aspect(\"equal\")\n",
    "\n",
    "# x_left, y_left = xs[0], ys[0]\n",
    "# x_right, y_right = xs[-1], ys[-1]\n",
    "# angle_da = np.arctan2(x_right - x_left, y_right - y_left)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8f1ad879",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
